'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.exec = undefined;

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var needWithDryRun = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(target) {
    var target2, result;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            target2 = (0, _assign2.default)({ dryRun: true }, target);
            _context.next = 3;
            return (0, _pkgFetch.need)(target2);

          case 3:
            result = _context.sent;

            (0, _assert2.default)(['exists', 'fetched', 'built'].indexOf(result) >= 0);
            dryRunResults[result] = true;

          case 6:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function needWithDryRun(_x) {
    return _ref.apply(this, arguments);
  };
}();

var needViaCache = function () {
  var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(target) {
    var s, c;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            s = stringifyTarget(target);
            c = targetsCache[s];

            if (!c) {
              _context2.next = 4;
              break;
            }

            return _context2.abrupt('return', c);

          case 4:
            _context2.next = 6;
            return (0, _pkgFetch.need)(target);

          case 6:
            c = _context2.sent;

            targetsCache[s] = c;
            return _context2.abrupt('return', c);

          case 9:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function needViaCache(_x2) {
    return _ref2.apply(this, arguments);
  };
}();

var exec = exports.exec = function () {
  var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(argv2) {
    var argv, forceBuild, input, inputJson, inputBin, bin, inputFin, config, configJson, output, outputDir, autoOutput, name, ext, sTargets, targets, jsonTargets, different, target, file, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, _target, _file, options, _iteratorNormalCompletion5, _didIteratorError5, _iteratorError5, _iterator5, _step5, _target2, _iteratorNormalCompletion6, _didIteratorError6, _iteratorError6, _iterator6, _step6, _target3, f, _iteratorNormalCompletion7, _didIteratorError7, _iteratorError7, _iterator7, _step7, _target4, _f, tuple, records, stripes, _iteratorNormalCompletion8, _didIteratorError8, _iteratorError8, _iterator8, _step8, _target5, slash, _iteratorNormalCompletion9, _didIteratorError9, _iteratorError9, _iterator9, _step9, _target6;

    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            // eslint-disable-line complexity
            argv = (0, _minimist2.default)(argv2, {
              boolean: ['b', 'build', 'd', 'debug', 'h', 'help', 'v', 'version'],
              string: ['_', 'c', 'config', 'o', 'options', 'output', 'outdir', 'out-dir', 't', 'target', 'targets']
            });

            if (!(argv.h || argv.help)) {
              _context3.next = 4;
              break;
            }

            (0, _help2.default)();
            return _context3.abrupt('return');

          case 4:
            if (!(argv.v || argv.version)) {
              _context3.next = 7;
              break;
            }

            console.log(require('../package.json').version);
            return _context3.abrupt('return');

          case 7:

            // debug

            _log.log.debugMode = argv.d || argv.debug;

            // forceBuild

            forceBuild = argv.b || argv.build;

            // _

            if (argv._.length) {
              _context3.next = 11;
              break;
            }

            throw (0, _log.wasReported)('Entry file/directory is expected', ['Pass --help to see usage information']);

          case 11:
            if (!(argv._.length > 1)) {
              _context3.next = 13;
              break;
            }

            throw (0, _log.wasReported)('Not more than one entry file/directory is expected');

          case 13:

            // input

            input = _path2.default.resolve(argv._[0]);
            _context3.next = 16;
            return (0, _fsPromise.exists)(input);

          case 16:
            if (_context3.sent) {
              _context3.next = 18;
              break;
            }

            throw (0, _log.wasReported)('Input file ' + input + ' does not exist');

          case 18:
            _context3.next = 20;
            return (0, _fsPromise.stat)(input);

          case 20:
            if (!_context3.sent.isDirectory()) {
              _context3.next = 26;
              break;
            }

            input = _path2.default.join(input, 'package.json');
            _context3.next = 24;
            return (0, _fsPromise.exists)(input);

          case 24:
            if (_context3.sent) {
              _context3.next = 26;
              break;
            }

            throw (0, _log.wasReported)('Input file ' + input + ' does not exist');

          case 26:

            // inputJson

            inputJson = null;

            if (!(0, _common.isPackageJson)(input)) {
              _context3.next = 33;
              break;
            }

            _context3.t0 = JSON;
            _context3.next = 31;
            return (0, _fsPromise.readFile)(input);

          case 31:
            _context3.t1 = _context3.sent;
            inputJson = _context3.t0.parse.call(_context3.t0, _context3.t1);

          case 33:

            // inputBin

            inputBin = null;

            if (!inputJson) {
              _context3.next = 43;
              break;
            }

            bin = inputJson.bin;

            if (!bin) {
              _context3.next = 43;
              break;
            }

            if ((typeof bin === 'undefined' ? 'undefined' : (0, _typeof3.default)(bin)) === 'object') {
              if (bin[inputJson.name]) {
                bin = bin[inputJson.name];
              } else {
                bin = bin[(0, _keys2.default)(bin)[0]]; // TODO multiple inputs to compile them all?
              }
            }
            inputBin = _path2.default.resolve(_path2.default.dirname(input), bin);
            _context3.next = 41;
            return (0, _fsPromise.exists)(inputBin);

          case 41:
            if (_context3.sent) {
              _context3.next = 43;
              break;
            }

            throw (0, _log.wasReported)(inputBin + ' does not exist (taken from package.json \'bin\' property)');

          case 43:
            if (!(inputJson && !inputBin)) {
              _context3.next = 45;
              break;
            }

            throw (0, _log.wasReported)('Property \'bin\' does not exist in ' + input);

          case 45:

            // inputFin

            inputFin = inputBin || input;

            // config

            config = argv.c || argv.config;

            if (!(inputJson && config)) {
              _context3.next = 49;
              break;
            }

            throw (0, _log.wasReported)('Specify either \'package.json\' or config. Not both');

          case 49:

            // configJson

            configJson = null;

            if (!config) {
              _context3.next = 58;
              break;
            }

            config = _path2.default.resolve(config);
            _context3.next = 54;
            return (0, _fsPromise.exists)(config);

          case 54:
            if (_context3.sent) {
              _context3.next = 56;
              break;
            }

            throw (0, _log.wasReported)('Config file ' + config + ' does not exist');

          case 56:
            configJson = require(config); // may be either json or js
            if (!configJson.name && !configJson.files && !configJson.dependencies && !configJson.pkg) {
              // package.json not detected
              configJson = { pkg: configJson };
            }

          case 58:

            // output, outputDir

            output = argv.o || argv.output;
            outputDir = argv.outdir || argv['out-dir'];
            autoOutput = false;

            if (!(output && outputDir)) {
              _context3.next = 63;
              break;
            }

            throw (0, _log.wasReported)('Specify either \'output\' or \'out-dir\'. Not both');

          case 63:
            if (output) {
              _context3.next = 77;
              break;
            }

            name = void 0;

            if (!inputJson) {
              _context3.next = 71;
              break;
            }

            name = inputJson.name;

            if (name) {
              _context3.next = 69;
              break;
            }

            throw (0, _log.wasReported)('Property \'name\' does not exist in ' + argv._[0]);

          case 69:
            _context3.next = 72;
            break;

          case 71:
            if (configJson) {
              name = configJson.name;
            }

          case 72:
            if (!name) {
              name = _path2.default.basename(inputFin);
            }
            autoOutput = true;
            ext = _path2.default.extname(name);

            output = name.slice(0, -ext.length || undefined);
            output = _path2.default.resolve(outputDir || '', output);

          case 77:

            // targets

            sTargets = argv.t || argv.target || argv.targets || '';

            if (!(typeof sTargets !== 'string')) {
              _context3.next = 80;
              break;
            }

            throw (0, _log.wasReported)('Something is wrong near ' + (0, _stringify2.default)(sTargets));

          case 80:
            targets = parseTargets(sTargets.split(',').filter(function (t) {
              return t;
            }));


            if (!targets.length) {
              jsonTargets = void 0;

              if (inputJson && inputJson.pkg) {
                jsonTargets = inputJson.pkg.targets;
              } else if (configJson && configJson.pkg) {
                jsonTargets = configJson.pkg.targets;
              }
              if (jsonTargets) {
                targets = parseTargets(jsonTargets);
              }
            }

            if (!targets.length) {
              if (!autoOutput) {
                targets = parseTargets(['host']);
                (0, _assert2.default)(targets.length === 1);
              } else {
                targets = parseTargets(['linux', 'macos', 'win']);
              }
              _log.log.info('Targets not specified. Assuming:', '' + targets.map(stringifyTarget).join(', '));
            }

            // differentParts

            different = differentParts(targets);

            // targets[].output

            if (!(targets.length === 1)) {
              _context3.next = 91;
              break;
            }

            target = targets[0];
            file = output;

            if (target.platform === 'win' && autoOutput) file += '.exe';
            target.output = file;
            _context3.next = 110;
            break;

          case 91:
            _iteratorNormalCompletion4 = true;
            _didIteratorError4 = false;
            _iteratorError4 = undefined;
            _context3.prev = 94;

            for (_iterator4 = (0, _getIterator3.default)(targets); !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
              _target = _step4.value;
              _file = stringifyTargetForOutput(output, _target, different);

              if (_target.platform === 'win') _file += '.exe';
              _target.output = _file;
            }
            _context3.next = 102;
            break;

          case 98:
            _context3.prev = 98;
            _context3.t2 = _context3['catch'](94);
            _didIteratorError4 = true;
            _iteratorError4 = _context3.t2;

          case 102:
            _context3.prev = 102;
            _context3.prev = 103;

            if (!_iteratorNormalCompletion4 && _iterator4.return) {
              _iterator4.return();
            }

          case 105:
            _context3.prev = 105;

            if (!_didIteratorError4) {
              _context3.next = 108;
              break;
            }

            throw _iteratorError4;

          case 108:
            return _context3.finish(105);

          case 109:
            return _context3.finish(102);

          case 110:

            // options

            options = argv.options || '';

            options = options.split(',').filter(function (option) {
              return option;
            }).map(function (option) {
              return '--' + option;
            });

            // check if input is going
            // to be overwritten by output

            _iteratorNormalCompletion5 = true;
            _didIteratorError5 = false;
            _iteratorError5 = undefined;
            _context3.prev = 115;
            _iterator5 = (0, _getIterator3.default)(targets);

          case 117:
            if (_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done) {
              _context3.next = 128;
              break;
            }

            _target2 = _step5.value;

            if (!(_target2.output === inputFin)) {
              _context3.next = 125;
              break;
            }

            if (!autoOutput) {
              _context3.next = 124;
              break;
            }

            _target2.output += '-' + _target2.platform;
            _context3.next = 125;
            break;

          case 124:
            throw (0, _log.wasReported)('Refusing to overwrite input ' + inputFin);

          case 125:
            _iteratorNormalCompletion5 = true;
            _context3.next = 117;
            break;

          case 128:
            _context3.next = 134;
            break;

          case 130:
            _context3.prev = 130;
            _context3.t3 = _context3['catch'](115);
            _didIteratorError5 = true;
            _iteratorError5 = _context3.t3;

          case 134:
            _context3.prev = 134;
            _context3.prev = 135;

            if (!_iteratorNormalCompletion5 && _iterator5.return) {
              _iterator5.return();
            }

          case 137:
            _context3.prev = 137;

            if (!_didIteratorError5) {
              _context3.next = 140;
              break;
            }

            throw _iteratorError5;

          case 140:
            return _context3.finish(137);

          case 141:
            return _context3.finish(134);

          case 142:

            // fetch targets

            _iteratorNormalCompletion6 = true;
            _didIteratorError6 = false;
            _iteratorError6 = undefined;
            _context3.prev = 145;
            _iterator6 = (0, _getIterator3.default)(targets);

          case 147:
            if (_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done) {
              _context3.next = 159;
              break;
            }

            _target3 = _step6.value;

            _target3.forceBuild = forceBuild;
            _context3.next = 152;
            return needWithDryRun(_target3);

          case 152:
            f = _target3.fabricator = fabricatorForTarget(_target3);

            f.forceBuild = forceBuild;
            _context3.next = 156;
            return needWithDryRun(f);

          case 156:
            _iteratorNormalCompletion6 = true;
            _context3.next = 147;
            break;

          case 159:
            _context3.next = 165;
            break;

          case 161:
            _context3.prev = 161;
            _context3.t4 = _context3['catch'](145);
            _didIteratorError6 = true;
            _iteratorError6 = _context3.t4;

          case 165:
            _context3.prev = 165;
            _context3.prev = 166;

            if (!_iteratorNormalCompletion6 && _iterator6.return) {
              _iterator6.return();
            }

          case 168:
            _context3.prev = 168;

            if (!_didIteratorError6) {
              _context3.next = 171;
              break;
            }

            throw _iteratorError6;

          case 171:
            return _context3.finish(168);

          case 172:
            return _context3.finish(165);

          case 173:

            if (dryRunResults.fetched && !dryRunResults.built) {
              _log.log.info('Fetching base Node.js binaries to: ~/.pkg-cache');
            }

            _iteratorNormalCompletion7 = true;
            _didIteratorError7 = false;
            _iteratorError7 = undefined;
            _context3.prev = 177;
            _iterator7 = (0, _getIterator3.default)(targets);

          case 179:
            if (_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done) {
              _context3.next = 194;
              break;
            }

            _target4 = _step7.value;
            _context3.next = 183;
            return needViaCache(_target4);

          case 183:
            _target4.binaryPath = _context3.sent;
            _f = _target4.fabricator;
            _context3.next = 187;
            return needViaCache(_f);

          case 187:
            _f.binaryPath = _context3.sent;

            if (!(_f.platform !== 'win')) {
              _context3.next = 191;
              break;
            }

            _context3.next = 191;
            return (0, _chmod.plusx)(_f.binaryPath);

          case 191:
            _iteratorNormalCompletion7 = true;
            _context3.next = 179;
            break;

          case 194:
            _context3.next = 200;
            break;

          case 196:
            _context3.prev = 196;
            _context3.t5 = _context3['catch'](177);
            _didIteratorError7 = true;
            _iteratorError7 = _context3.t5;

          case 200:
            _context3.prev = 200;
            _context3.prev = 201;

            if (!_iteratorNormalCompletion7 && _iterator7.return) {
              _iterator7.return();
            }

          case 203:
            _context3.prev = 203;

            if (!_didIteratorError7) {
              _context3.next = 206;
              break;
            }

            throw _iteratorError7;

          case 206:
            return _context3.finish(203);

          case 207:
            return _context3.finish(200);

          case 208:

            // tuple

            tuple = void 0;


            if (configJson) {
              tuple = {
                config: configJson,
                base: _path2.default.dirname(config)
              };
            } else {
              tuple = {
                config: inputJson || {},
                base: _path2.default.dirname(input) // not `inputBin` because only `input`
              }; // is the place for `inputJson`
            }

            // records

            _context3.next = 212;
            return (0, _walker2.default)({
              tuple: tuple, input: inputFin
            });

          case 212:
            records = _context3.sent;
            stripes = {};
            _iteratorNormalCompletion8 = true;
            _didIteratorError8 = false;
            _iteratorError8 = undefined;
            _context3.prev = 217;
            _iterator8 = (0, _getIterator3.default)(targets);

          case 219:
            if (_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done) {
              _context3.next = 230;
              break;
            }

            _target5 = _step8.value;
            slash = _target5.platform === 'win' ? '\\' : '/';

            _target5.slash = slash;

            if (stripes[slash]) {
              _context3.next = 227;
              break;
            }

            _context3.next = 226;
            return (0, _packer2.default)({ records: records, slash: slash });

          case 226:
            stripes[slash] = _context3.sent;

          case 227:
            _iteratorNormalCompletion8 = true;
            _context3.next = 219;
            break;

          case 230:
            _context3.next = 236;
            break;

          case 232:
            _context3.prev = 232;
            _context3.t6 = _context3['catch'](217);
            _didIteratorError8 = true;
            _iteratorError8 = _context3.t6;

          case 236:
            _context3.prev = 236;
            _context3.prev = 237;

            if (!_iteratorNormalCompletion8 && _iterator8.return) {
              _iterator8.return();
            }

          case 239:
            _context3.prev = 239;

            if (!_didIteratorError8) {
              _context3.next = 242;
              break;
            }

            throw _iteratorError8;

          case 242:
            return _context3.finish(239);

          case 243:
            return _context3.finish(236);

          case 244:

            _log.log.debug('Targets:', (0, _stringify2.default)(targets));

            _iteratorNormalCompletion9 = true;
            _didIteratorError9 = false;
            _iteratorError9 = undefined;
            _context3.prev = 248;
            _iterator9 = (0, _getIterator3.default)(targets);

          case 250:
            if (_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done) {
              _context3.next = 264;
              break;
            }

            _target6 = _step9.value;
            _context3.next = 254;
            return (0, _fsPromise.mkdirp)(_path2.default.dirname(_target6.output));

          case 254:
            _context3.next = 256;
            return (0, _fsPromise.remove)(_target6.output);

          case 256:
            _context3.next = 258;
            return (0, _producer2.default)({ stripe: stripes[_target6.slash], options: options, target: _target6 });

          case 258:
            if (!(_target6.platform !== 'win')) {
              _context3.next = 261;
              break;
            }

            _context3.next = 261;
            return (0, _chmod.plusx)(_target6.output);

          case 261:
            _iteratorNormalCompletion9 = true;
            _context3.next = 250;
            break;

          case 264:
            _context3.next = 270;
            break;

          case 266:
            _context3.prev = 266;
            _context3.t7 = _context3['catch'](248);
            _didIteratorError9 = true;
            _iteratorError9 = _context3.t7;

          case 270:
            _context3.prev = 270;
            _context3.prev = 271;

            if (!_iteratorNormalCompletion9 && _iterator9.return) {
              _iterator9.return();
            }

          case 273:
            _context3.prev = 273;

            if (!_didIteratorError9) {
              _context3.next = 276;
              break;
            }

            throw _iteratorError9;

          case 276:
            return _context3.finish(273);

          case 277:
            return _context3.finish(270);

          case 278:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this, [[94, 98, 102, 110], [103,, 105, 109], [115, 130, 134, 142], [135,, 137, 141], [145, 161, 165, 173], [166,, 168, 172], [177, 196, 200, 208], [201,, 203, 207], [217, 232, 236, 244], [237,, 239, 243], [248, 266, 270, 278], [271,, 273, 277]]);
  }));

  return function exec(_x3) {
    return _ref3.apply(this, arguments);
  };
}();

var _fsPromise = require('fs-promise');

var _log = require('./log.js');

var _pkgFetch = require('pkg-fetch');

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _help = require('./help');

var _help2 = _interopRequireDefault(_help);

var _common = require('../prelude/common.js');

var _minimist = require('minimist');

var _minimist2 = _interopRequireDefault(_minimist);

var _packer = require('./packer.js');

var _packer2 = _interopRequireDefault(_packer);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _chmod = require('./chmod.js');

var _producer = require('./producer.js');

var _producer2 = _interopRequireDefault(_producer);

var _walker = require('./walker.js');

var _walker2 = _interopRequireDefault(_walker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// http://www.openwall.com/lists/musl/2012/12/08/4

var hostArch = _pkgFetch.system.hostArch,
    hostPlatform = _pkgFetch.system.hostPlatform,
    isValidNodeRange = _pkgFetch.system.isValidNodeRange,
    knownArchs = _pkgFetch.system.knownArchs,
    knownPlatforms = _pkgFetch.system.knownPlatforms,
    toFancyArch = _pkgFetch.system.toFancyArch,
    toFancyPlatform = _pkgFetch.system.toFancyPlatform;

var hostNodeRange = 'node' + process.version.match(/^v(\d+)/)[1];

function parseTargets(items) {
  // [ 'node6-macos-x64', 'node6-linux-x64' ]
  var targets = [];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = (0, _getIterator3.default)(items), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var item = _step.value;

      var target = {
        nodeRange: hostNodeRange,
        platform: hostPlatform,
        arch: hostArch
      };
      if (item !== 'host') {
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = (0, _getIterator3.default)(item.split('-')), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var token = _step2.value;

            if (!token) continue;
            if (isValidNodeRange(token)) {
              target.nodeRange = token;
              continue;
            }
            var p = toFancyPlatform(token);
            if (knownPlatforms.indexOf(p) >= 0) {
              target.platform = p;
              continue;
            }
            var a = toFancyArch(token);
            if (knownArchs.indexOf(a) >= 0) {
              target.arch = a;
              continue;
            }
            throw (0, _log.wasReported)('Unknown token \'' + token + '\' in \'' + item + '\'');
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      }
      targets.push(target);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return targets;
}

function stringifyTarget(target) {
  var nodeRange = target.nodeRange,
      platform = target.platform,
      arch = target.arch;

  return nodeRange + '-' + platform + '-' + arch;
}

function differentParts(targets) {
  var nodeRanges = {};
  var platforms = {};
  var archs = {};
  var _iteratorNormalCompletion3 = true;
  var _didIteratorError3 = false;
  var _iteratorError3 = undefined;

  try {
    for (var _iterator3 = (0, _getIterator3.default)(targets), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
      var target = _step3.value;

      nodeRanges[target.nodeRange] = true;
      platforms[target.platform] = true;
      archs[target.arch] = true;
    }
  } catch (err) {
    _didIteratorError3 = true;
    _iteratorError3 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion3 && _iterator3.return) {
        _iterator3.return();
      }
    } finally {
      if (_didIteratorError3) {
        throw _iteratorError3;
      }
    }
  }

  var result = {};
  if ((0, _keys2.default)(nodeRanges).length > 1) {
    result.nodeRange = true;
  }
  if ((0, _keys2.default)(platforms).length > 1) {
    result.platform = true;
  }
  if ((0, _keys2.default)(archs).length > 1) {
    result.arch = true;
  }
  return result;
}

function stringifyTargetForOutput(output, target, different) {
  var a = [output];
  if (different.nodeRange) a.push(target.nodeRange);
  if (different.platform) a.push(target.platform);
  if (different.arch) a.push(target.arch);
  return a.join('-');
}

function fabricatorForTarget(target) {
  var nodeRange = target.nodeRange,
      arch = target.arch;

  return { nodeRange: nodeRange, platform: hostPlatform, arch: arch };
}

var dryRunResults = {};

var targetsCache = {};